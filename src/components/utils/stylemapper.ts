import { type ImageStyle, type TextStyle, type ViewStyle } from 'react-native';

// Function for mapping custom style related props to their corresponding properties
export const viewStyleMapper = () => {
  // Define mapping for custom props to their corresponding style props
  const styleMapping: { [key: string]: keyof ViewStyle } = {
    bfv: 'backfaceVisibility',
    bbc: 'borderBottomColor',
    bber: 'borderBottomEndRadius',
    bblr: 'borderBottomLeftRadius',
    bbrr: 'borderBottomRightRadius',
    bbsr: 'borderBottomStartRadius',
    bser: 'borderStartEndRadius',
    bssr: 'borderStartStartRadius',
    beer: 'borderEndEndRadius',
    besr: 'borderEndStartRadius',
    bbw: 'borderBottomWidth',
    bc: 'borderColor',
    bci: 'borderCurve',
    bec: 'borderEndColor',
    blc: 'borderLeftColor',
    blw: 'borderLeftWidth',
    br: 'borderRadius',
    brc: 'borderRightColor',
    brw: 'borderRightWidth',
    bsc: 'borderStartColor',
    bs: 'borderStyle',
    btc: 'borderTopColor',
    bter: 'borderTopEndRadius',
    btlr: 'borderTopLeftRadius',
    btrr: 'borderTopRightRadius',
    btsr: 'borderTopStartRadius',
    btw: 'borderTopWidth',
    bw: 'borderWidth',
    el: 'elevation',
    pn: 'position',
    o: 'opacity',
    pe: 'pointerEvents',
    m: 'margin',
    mt: 'marginTop',
    mr: 'marginRight',
    mb: 'marginBottom',
    ml: 'marginLeft',
    p: 'padding',
    pt: 'paddingTop',
    pr: 'paddingRight',
    pb: 'paddingBottom',
    pl: 'paddingLeft',
    ph: 'paddingHorizontal',
    pv: 'paddingVertical',
    mv: 'marginVertical',
    mh: 'marginHorizontal',
    ac: 'alignContent',
    ai: 'alignItems',
    as: 'alignSelf',
    ar: 'aspectRatio',
    b: 'bottom',
    t: 'top',
    r: 'right',
    l: 'left',
    d: 'display',
    e: 'end',
    s: 'start',
    f: 'flex',
    fb: 'flexBasis',
    fd: 'flexDirection',
    rg: 'rowGap',
    g: 'gap',
    cg: 'columnGap',
    fg: 'flexGrow',
    fsk: 'flexShrink',
    fwp: 'flexWrap',
    jc: 'justifyContent',
    zi: 'zIndex',
  };
  return styleMapping;
};

export const imageStyleProps = () => {
  // Define mapping for custom props to their corresponding style props
  const styleMapping: { [key: string]: keyof ImageStyle } = {
    bfv: 'backfaceVisibility',
    bblr: 'borderBottomLeftRadius',
    bbrr: 'borderBottomRightRadius',
    bbw: 'borderBottomWidth',
    pn: 'position',
    bc: 'borderColor',
    blw: 'borderLeftWidth',
    br: 'borderRadius',
    brw: 'borderRightWidth',
    btlr: 'borderTopLeftRadius',
    btrr: 'borderTopRightRadius',
    btw: 'borderTopWidth',
    bw: 'borderWidth',
    o: 'opacity',
    m: 'margin',
    mt: 'marginTop',
    mr: 'marginRight',
    mb: 'marginBottom',
    ml: 'marginLeft',
    p: 'padding',
    pt: 'paddingTop',
    pr: 'paddingRight',
    pb: 'paddingBottom',
    pl: 'paddingLeft',
    ph: 'paddingHorizontal',
    pv: 'paddingVertical',
    mv: 'marginVertical',
    mh: 'marginHorizontal',
    ac: 'alignContent',
    ai: 'alignItems',
    as: 'alignSelf',
    ar: 'aspectRatio',
    b: 'bottom',
    t: 'top',
    r: 'right',
    l: 'left',
    d: 'display',
    s: 'start',
    e: 'end',
    f: 'flex',
    fb: 'flexBasis',
    fd: 'flexDirection',
    rg: 'rowGap',
    g: 'gap',
    cg: 'columnGap',
    fg: 'flexGrow',
    fsk: 'flexShrink',
    fwp: 'flexWrap',
    jc: 'justifyContent',
    zi: 'zIndex',
    rm: 'resizeMode',
    bv: 'backfaceVisibility',
    ov: 'overflow',
    oc: 'overlayColor',
    tc: 'tintColor',
    of: 'objectFit',
    w: 'width',
    h: 'height',
  };
  return styleMapping;
};

export const textStyleMapper = () => {
  // Define mapping for custom props to their corresponding style props
  const styleMapping: { [key: string]: keyof TextStyle } = {
    w: 'width',
    h: 'height',
    c: 'color',
    bgc: 'backgroundColor',
    ta: 'textAlign',
    pn: 'position',
    tav: 'textAlignVertical',
    ff: 'fontFamily',
    fs: 'fontSize',
    fst: 'fontStyle',
    fw: 'fontWeight',
    ls: 'letterSpacing',
    lh: 'lineHeight',
    tdl: 'textDecorationLine',
    tds: 'textDecorationStyle',
    tdc: 'textDecorationColor',
    tsc: 'textShadowColor',
    tso: 'textShadowOffset',
    tsr: 'textShadowRadius',
    tt: 'textTransform',
    m: 'margin',
    mt: 'marginTop',
    mr: 'marginRight',
    mb: 'marginBottom',
    ml: 'marginLeft',
    p: 'padding',
    pv: 'paddingVertical',
    ph: 'paddingHorizontal',
    pt: 'paddingTop',
    pr: 'paddingRight',
    pb: 'paddingBottom',
    pl: 'paddingLeft',
    ifp: 'includeFontPadding',
    va: 'verticalAlign',
    wd: 'writingDirection',
    us: 'userSelect',
    ac: 'alignContent',
    ai: 'alignItems',
    as: 'alignSelf',
    ar: 'aspectRatio',
    bbc: 'borderBottomColor',
    bber: 'borderBottomEndRadius',
    bblr: 'borderBottomLeftRadius',
    bbrr: 'borderBottomRightRadius',
    bbsr: 'borderBottomStartRadius',
    bser: 'borderStartEndRadius',
    bssr: 'borderStartStartRadius',
    beer: 'borderEndEndRadius',
    besr: 'borderEndStartRadius',
    bbw: 'borderBottomWidth',
    bec: 'borderEndColor',
    blc: 'borderLeftColor',
    blw: 'borderLeftWidth',
    br: 'borderRadius',
    brc: 'borderRightColor',
    brw: 'borderRightWidth',
    bsc: 'borderStartColor',
    bs: 'borderStyle',
    btc: 'borderTopColor',
    bter: 'borderTopEndRadius',
    btlr: 'borderTopLeftRadius',
    btrr: 'borderTopRightRadius',
    btsr: 'borderTopStartRadius',
    btw: 'borderTopWidth',
    bw: 'borderWidth',
    el: 'elevation', // Android
    o: 'opacity',
    b: 'bottom',
    t: 'top',
    r: 'right',
    l: 'left',
    d: 'display',
    s: 'start',
    e: 'end',
    f: 'flex',
    fb: 'flexBasis',
    fd: 'flexDirection',
    rg: 'rowGap',
    g: 'gap',
    cg: 'columnGap',
    fg: 'flexGrow',
    fsk: 'flexShrink',
    fwp: 'flexWrap',
    jc: 'justifyContent',
    zi: 'zIndex',
  };
  return styleMapping;
};
